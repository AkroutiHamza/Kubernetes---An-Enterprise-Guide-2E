---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: jit-gitlab
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-{{ .Release.Name }}
    app.kubernetes.io/component: openunison-workflows
    app.kubernetes.io/part-of: openunison
spec:
  description: GitLab JIT
  inList: false
  label: GitLab JIT
  orgId: 687da09f-8ec1-48ac-b035-f2f182b9bd1e
  dynamicConfiguration:
    dynamic: false
    className: ""
    params: []
  tasks: |-
    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.LoadGroups
      params:
        nameAttr: uid

    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.PrintUserInfo
      params:
        message: "pre-map-gitlab"
    
    - taskType: mapping
      strict: true
      map:
        - targetAttributeName: TREMOLO_USER_ID
          sourceType: user
          targetAttributeSource: uid
        - targetAttributeName: username
          sourceType: user
          targetAttributeSource: uid
        - targetAttributeName: email
          sourceType: user
          targetAttributeSource: mail
        - targetAttributeName: name
          sourceType: composite
          targetAttributeSource: "${givenName} ${sn}"
      onSuccess:
      - taskType: ifAttrHasValue
        name: groups
        value: k8s-cluster-k8s-administrators
        onSuccess:
        - taskType: addAttribute
          name: isAdmin
          value: "true"

        onFailure:
        - taskType: addAttribute
          name: isAdmin
          value: "false"
      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
        params:
          javaScript: |-
            // map from openunison groups to gitlab

            HashMap = Java.type("java.util.HashMap");
            GitlabUserProvider = Java.type("com.tremolosecurity.unison.gitlab.provisioning.targets.GitlabUserProvider");

            function init(task,params) {
            // nothing to do
            }

            function reInit(task) {
            // do nothing
            }

            function doTask(user,request) {
                groupMap = new HashMap();

                for (var i=0;i<user.getGroups().size();i++) {
                    var group = user.getGroups().get(i);

                    if (group.startsWith("approvers-k8s-")) {
                        groupmap.put(group, 40);
                    } else if (group.startsWith("k8s-namespace-developer")) {
                        groupmap.put(group,30);
                    } else if (group.startsWith("k8s-namespace-operations")) {
                        groupmap.put(group,30);
                    }

                    request.put(GitlabUserProvider.GITLAB_GROUP_ENTITLEMENTS,groupmap);

                }
                return true;
            }
      - taskType: customTask
        className: com.tremolosecurity.unison.gitlab.provisioning.tasks.AddGitlabExternalIdentity
        params:
          provider: openid_connect
          userAttribute: username
      - taskType: provision
        sync: true
        target: gitlab
        setPassword: false
        onlyPassedInAttributes: false
        attributes:
        - username
        - name
        - email
        - isAdmin
        - skipConfirmation
        - projectsLimit
        